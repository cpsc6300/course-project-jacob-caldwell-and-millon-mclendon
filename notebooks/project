{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "CPSC 4300/6300-001 Applied Data Science (Fall 2020)\n",
    "\n",
    "Final Project \"MLB Predicitons\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "NAME = \"Millon McLendon\"\n",
    "COLLABORATORS = \"Jacob Caldwell\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns; sns.set()\n",
    "sns.set_style(\"whitegrid\")\n",
    "\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>Player Name</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "      <th>bats</th>\n",
       "      <th>throws</th>\n",
       "      <th>Season</th>\n",
       "      <th>League</th>\n",
       "      <th>teamID</th>\n",
       "      <th>Team</th>\n",
       "      <th>...</th>\n",
       "      <th>RBI</th>\n",
       "      <th>SB</th>\n",
       "      <th>BB</th>\n",
       "      <th>SO</th>\n",
       "      <th>salary</th>\n",
       "      <th>IBB</th>\n",
       "      <th>HBP</th>\n",
       "      <th>SH</th>\n",
       "      <th>SF</th>\n",
       "      <th>PA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>aardsda01</td>\n",
       "      <td>David Aardsma</td>\n",
       "      <td>215</td>\n",
       "      <td>75</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>2004</td>\n",
       "      <td>NL</td>\n",
       "      <td>SFN</td>\n",
       "      <td>San Francisco Giants</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>300000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>aardsda01</td>\n",
       "      <td>David Aardsma</td>\n",
       "      <td>215</td>\n",
       "      <td>75</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>2007</td>\n",
       "      <td>AL</td>\n",
       "      <td>CHA</td>\n",
       "      <td>Chicago White Sox</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>387500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aardsda01</td>\n",
       "      <td>David Aardsma</td>\n",
       "      <td>215</td>\n",
       "      <td>75</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>2008</td>\n",
       "      <td>AL</td>\n",
       "      <td>BOS</td>\n",
       "      <td>Boston Red Sox</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>403250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>aardsda01</td>\n",
       "      <td>David Aardsma</td>\n",
       "      <td>215</td>\n",
       "      <td>75</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>2009</td>\n",
       "      <td>AL</td>\n",
       "      <td>SEA</td>\n",
       "      <td>Seattle Mariners</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>419000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>aardsda01</td>\n",
       "      <td>David Aardsma</td>\n",
       "      <td>215</td>\n",
       "      <td>75</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>2012</td>\n",
       "      <td>AL</td>\n",
       "      <td>NYA</td>\n",
       "      <td>New York Yankees</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>500000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    playerID    Player Name  weight  height bats throws  Season League teamID  \\\n",
       "0  aardsda01  David Aardsma     215      75    R      R    2004     NL    SFN   \n",
       "1  aardsda01  David Aardsma     215      75    R      R    2007     AL    CHA   \n",
       "2  aardsda01  David Aardsma     215      75    R      R    2008     AL    BOS   \n",
       "3  aardsda01  David Aardsma     215      75    R      R    2009     AL    SEA   \n",
       "4  aardsda01  David Aardsma     215      75    R      R    2012     AL    NYA   \n",
       "\n",
       "                   Team  ... RBI  SB  BB  SO  salary  IBB  HBP  SH  SF  PA  \n",
       "0  San Francisco Giants  ...   0   0   0   0  300000    0    0   0   0   0  \n",
       "1     Chicago White Sox  ...   0   0   0   0  387500    0    0   0   0   0  \n",
       "2        Boston Red Sox  ...   0   0   0   1  403250    0    0   0   0   1  \n",
       "3      Seattle Mariners  ...   0   0   0   0  419000    0    0   0   0   0  \n",
       "4      New York Yankees  ...   0   0   0   0  500000    0    0   0   0   0  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"./input/train.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a new Variable in the DataFrame Representing the Batting Average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>playerID</th>\n",
       "      <th>Player Name</th>\n",
       "      <th>weight</th>\n",
       "      <th>height</th>\n",
       "      <th>bats</th>\n",
       "      <th>throws</th>\n",
       "      <th>Season</th>\n",
       "      <th>League</th>\n",
       "      <th>teamID</th>\n",
       "      <th>Team</th>\n",
       "      <th>...</th>\n",
       "      <th>SB</th>\n",
       "      <th>BB</th>\n",
       "      <th>SO</th>\n",
       "      <th>salary</th>\n",
       "      <th>IBB</th>\n",
       "      <th>HBP</th>\n",
       "      <th>SH</th>\n",
       "      <th>SF</th>\n",
       "      <th>PA</th>\n",
       "      <th>BA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26542</th>\n",
       "      <td>walkela01</td>\n",
       "      <td>Larry Walker</td>\n",
       "      <td>185</td>\n",
       "      <td>74</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>1999</td>\n",
       "      <td>NL</td>\n",
       "      <td>COL</td>\n",
       "      <td>Colorado Rockies</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>57</td>\n",
       "      <td>52</td>\n",
       "      <td>5417857</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>521</td>\n",
       "      <td>0.379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10086</th>\n",
       "      <td>gwynnto01</td>\n",
       "      <td>Tony Gwynn</td>\n",
       "      <td>185</td>\n",
       "      <td>71</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>1997</td>\n",
       "      <td>NL</td>\n",
       "      <td>SDN</td>\n",
       "      <td>San Diego Padres</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>43</td>\n",
       "      <td>28</td>\n",
       "      <td>4575000</td>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>663</td>\n",
       "      <td>0.372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8634</th>\n",
       "      <td>garcino01</td>\n",
       "      <td>Nomar Garciaparra</td>\n",
       "      <td>165</td>\n",
       "      <td>72</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>2000</td>\n",
       "      <td>AL</td>\n",
       "      <td>BOS</td>\n",
       "      <td>Boston Red Sox</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>61</td>\n",
       "      <td>50</td>\n",
       "      <td>3700000</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>619</td>\n",
       "      <td>0.372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24681</th>\n",
       "      <td>suzukic01</td>\n",
       "      <td>Ichiro Suzuki</td>\n",
       "      <td>175</td>\n",
       "      <td>71</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>2004</td>\n",
       "      <td>AL</td>\n",
       "      <td>SEA</td>\n",
       "      <td>Seattle Mariners</td>\n",
       "      <td>...</td>\n",
       "      <td>36</td>\n",
       "      <td>49</td>\n",
       "      <td>63</td>\n",
       "      <td>6500000</td>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>781</td>\n",
       "      <td>0.372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10889</th>\n",
       "      <td>heltoto01</td>\n",
       "      <td>Todd Helton</td>\n",
       "      <td>220</td>\n",
       "      <td>74</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>2000</td>\n",
       "      <td>NL</td>\n",
       "      <td>COL</td>\n",
       "      <td>Colorado Rockies</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>103</td>\n",
       "      <td>61</td>\n",
       "      <td>1300000</td>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>719</td>\n",
       "      <td>0.372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8465</th>\n",
       "      <td>galaran01</td>\n",
       "      <td>Andres Galarraga</td>\n",
       "      <td>235</td>\n",
       "      <td>75</td>\n",
       "      <td>R</td>\n",
       "      <td>R</td>\n",
       "      <td>1993</td>\n",
       "      <td>NL</td>\n",
       "      <td>COL</td>\n",
       "      <td>Colorado Rockies</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>24</td>\n",
       "      <td>73</td>\n",
       "      <td>850000</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>518</td>\n",
       "      <td>0.370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2516</th>\n",
       "      <td>bondsba01</td>\n",
       "      <td>Barry Bonds</td>\n",
       "      <td>185</td>\n",
       "      <td>73</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>2002</td>\n",
       "      <td>NL</td>\n",
       "      <td>SFN</td>\n",
       "      <td>San Francisco Giants</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>198</td>\n",
       "      <td>47</td>\n",
       "      <td>15000000</td>\n",
       "      <td>68</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>680</td>\n",
       "      <td>0.370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10074</th>\n",
       "      <td>gwynnto01</td>\n",
       "      <td>Tony Gwynn</td>\n",
       "      <td>185</td>\n",
       "      <td>71</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>1987</td>\n",
       "      <td>NL</td>\n",
       "      <td>SDN</td>\n",
       "      <td>San Diego Padres</td>\n",
       "      <td>...</td>\n",
       "      <td>56</td>\n",
       "      <td>82</td>\n",
       "      <td>35</td>\n",
       "      <td>765000</td>\n",
       "      <td>26</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>706</td>\n",
       "      <td>0.370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10087</th>\n",
       "      <td>gwynnto01</td>\n",
       "      <td>Tony Gwynn</td>\n",
       "      <td>185</td>\n",
       "      <td>71</td>\n",
       "      <td>L</td>\n",
       "      <td>L</td>\n",
       "      <td>1995</td>\n",
       "      <td>NL</td>\n",
       "      <td>SDN</td>\n",
       "      <td>San Diego Padres</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>35</td>\n",
       "      <td>15</td>\n",
       "      <td>4658334</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>587</td>\n",
       "      <td>0.368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2455</th>\n",
       "      <td>boggswa01</td>\n",
       "      <td>Wade Boggs</td>\n",
       "      <td>190</td>\n",
       "      <td>74</td>\n",
       "      <td>L</td>\n",
       "      <td>R</td>\n",
       "      <td>1985</td>\n",
       "      <td>AL</td>\n",
       "      <td>BOS</td>\n",
       "      <td>Boston Red Sox</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>96</td>\n",
       "      <td>61</td>\n",
       "      <td>1000000</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>763</td>\n",
       "      <td>0.368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        playerID        Player Name  weight  height bats throws  Season  \\\n",
       "26542  walkela01       Larry Walker     185      74    L      R    1999   \n",
       "10086  gwynnto01         Tony Gwynn     185      71    L      L    1997   \n",
       "8634   garcino01  Nomar Garciaparra     165      72    R      R    2000   \n",
       "24681  suzukic01      Ichiro Suzuki     175      71    L      R    2004   \n",
       "10889  heltoto01        Todd Helton     220      74    L      L    2000   \n",
       "8465   galaran01   Andres Galarraga     235      75    R      R    1993   \n",
       "2516   bondsba01        Barry Bonds     185      73    L      L    2002   \n",
       "10074  gwynnto01         Tony Gwynn     185      71    L      L    1987   \n",
       "10087  gwynnto01         Tony Gwynn     185      71    L      L    1995   \n",
       "2455   boggswa01         Wade Boggs     190      74    L      R    1985   \n",
       "\n",
       "      League teamID                  Team  ...  SB   BB  SO    salary  IBB  \\\n",
       "26542     NL    COL      Colorado Rockies  ...  11   57  52   5417857    8   \n",
       "10086     NL    SDN      San Diego Padres  ...  12   43  28   4575000   12   \n",
       "8634      AL    BOS        Boston Red Sox  ...   5   61  50   3700000   20   \n",
       "24681     AL    SEA      Seattle Mariners  ...  36   49  63   6500000   19   \n",
       "10889     NL    COL      Colorado Rockies  ...   5  103  61   1300000   22   \n",
       "8465      NL    COL      Colorado Rockies  ...   2   24  73    850000   12   \n",
       "2516      NL    SFN  San Francisco Giants  ...   9  198  47  15000000   68   \n",
       "10074     NL    SDN      San Diego Padres  ...  56   82  35    765000   26   \n",
       "10087     NL    SDN      San Diego Padres  ...  17   35  15   4658334   10   \n",
       "2455      AL    BOS        Boston Red Sox  ...   2   96  61   1000000    5   \n",
       "\n",
       "       HBP  SH  SF   PA     BA  \n",
       "26542   12   0   6  521  0.379  \n",
       "10086    3   1  12  663  0.372  \n",
       "8634     2   0   7  619  0.372  \n",
       "24681    4   2   3  781  0.372  \n",
       "10889    4   0  10  719  0.372  \n",
       "8465     6   0   6  518  0.370  \n",
       "2516     9   0   2  680  0.370  \n",
       "10074    3   2   4  706  0.370  \n",
       "10087    1   0   6  587  0.368  \n",
       "2455     4   3   2  763  0.368  \n",
       "\n",
       "[10 rows x 29 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "BA = []\n",
    "df = df[df.PA >= 500]\n",
    "\n",
    "for ab, h in zip(df['AB'], df['H']):\n",
    "    BA.append(h/ab)\n",
    "BA_formated = [ '%.3f' % elem for elem in BA ]\n",
    "df['BA'] = BA_formated\n",
    "\n",
    "df = df.sort_values(by=['BA'], ascending=False)\n",
    "#df = df[:10]\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create Graphs using different aspects of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10289</th>\n",
       "      <th>14449</th>\n",
       "      <th>3738</th>\n",
       "      <th>17792</th>\n",
       "      <th>3723</th>\n",
       "      <th>3736</th>\n",
       "      <th>434</th>\n",
       "      <th>9133</th>\n",
       "      <th>28152</th>\n",
       "      <th>436</th>\n",
       "      <th>...</th>\n",
       "      <th>7331</th>\n",
       "      <th>25744</th>\n",
       "      <th>1293</th>\n",
       "      <th>11376</th>\n",
       "      <th>6819</th>\n",
       "      <th>21332</th>\n",
       "      <th>19604</th>\n",
       "      <th>19607</th>\n",
       "      <th>5895</th>\n",
       "      <th>25730</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>BA</th>\n",
       "      <td>0.359</td>\n",
       "      <td>0.348</td>\n",
       "      <td>0.348</td>\n",
       "      <td>0.347</td>\n",
       "      <td>0.346</td>\n",
       "      <td>0.344</td>\n",
       "      <td>0.341</td>\n",
       "      <td>0.338</td>\n",
       "      <td>0.338</td>\n",
       "      <td>0.338</td>\n",
       "      <td>...</td>\n",
       "      <td>0.209</td>\n",
       "      <td>0.208</td>\n",
       "      <td>0.208</td>\n",
       "      <td>0.205</td>\n",
       "      <td>0.204</td>\n",
       "      <td>0.198</td>\n",
       "      <td>0.197</td>\n",
       "      <td>0.196</td>\n",
       "      <td>0.196</td>\n",
       "      <td>0.179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Season</th>\n",
       "      <td>2010</td>\n",
       "      <td>2016</td>\n",
       "      <td>2013</td>\n",
       "      <td>2016</td>\n",
       "      <td>2012</td>\n",
       "      <td>2011</td>\n",
       "      <td>2014</td>\n",
       "      <td>2011</td>\n",
       "      <td>2011</td>\n",
       "      <td>2016</td>\n",
       "      <td>...</td>\n",
       "      <td>2016</td>\n",
       "      <td>2014</td>\n",
       "      <td>2013</td>\n",
       "      <td>2010</td>\n",
       "      <td>2012</td>\n",
       "      <td>2010</td>\n",
       "      <td>2012</td>\n",
       "      <td>2010</td>\n",
       "      <td>2014</td>\n",
       "      <td>2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Player</th>\n",
       "      <td>Josh Hamilton</td>\n",
       "      <td>DJ LeMahieu</td>\n",
       "      <td>Miguel Cabrera</td>\n",
       "      <td>Daniel Murphy</td>\n",
       "      <td>Melky Cabrera</td>\n",
       "      <td>Miguel Cabrera</td>\n",
       "      <td>Jose Altuve</td>\n",
       "      <td>Adrian Gonzalez</td>\n",
       "      <td>Michael Young</td>\n",
       "      <td>Jose Altuve</td>\n",
       "      <td>...</td>\n",
       "      <td>Danny Espinosa</td>\n",
       "      <td>Melvin Upton</td>\n",
       "      <td>Darwin Barney</td>\n",
       "      <td>Aaron Hill</td>\n",
       "      <td>Adam Dunn</td>\n",
       "      <td>Mark Reynolds</td>\n",
       "      <td>Carlos Pena</td>\n",
       "      <td>Carlos Pena</td>\n",
       "      <td>Chris Davis</td>\n",
       "      <td>Dan Uggla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>H</th>\n",
       "      <td>186</td>\n",
       "      <td>192</td>\n",
       "      <td>193</td>\n",
       "      <td>184</td>\n",
       "      <td>159</td>\n",
       "      <td>197</td>\n",
       "      <td>225</td>\n",
       "      <td>213</td>\n",
       "      <td>213</td>\n",
       "      <td>216</td>\n",
       "      <td>...</td>\n",
       "      <td>108</td>\n",
       "      <td>108</td>\n",
       "      <td>104</td>\n",
       "      <td>108</td>\n",
       "      <td>110</td>\n",
       "      <td>99</td>\n",
       "      <td>98</td>\n",
       "      <td>95</td>\n",
       "      <td>88</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AB</th>\n",
       "      <td>518</td>\n",
       "      <td>552</td>\n",
       "      <td>555</td>\n",
       "      <td>531</td>\n",
       "      <td>459</td>\n",
       "      <td>572</td>\n",
       "      <td>660</td>\n",
       "      <td>630</td>\n",
       "      <td>631</td>\n",
       "      <td>640</td>\n",
       "      <td>...</td>\n",
       "      <td>516</td>\n",
       "      <td>519</td>\n",
       "      <td>501</td>\n",
       "      <td>528</td>\n",
       "      <td>539</td>\n",
       "      <td>499</td>\n",
       "      <td>497</td>\n",
       "      <td>484</td>\n",
       "      <td>450</td>\n",
       "      <td>448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 948 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                10289        14449           3738           17792  \\\n",
       "BA              0.359        0.348           0.348          0.347   \n",
       "Season           2010         2016            2013           2016   \n",
       "Player  Josh Hamilton  DJ LeMahieu  Miguel Cabrera  Daniel Murphy   \n",
       "H                 186          192             193            184   \n",
       "AB                518          552             555            531   \n",
       "\n",
       "                3723            3736         434              9133   \\\n",
       "BA              0.346           0.344        0.341            0.338   \n",
       "Season           2012            2011         2014             2011   \n",
       "Player  Melky Cabrera  Miguel Cabrera  Jose Altuve  Adrian Gonzalez   \n",
       "H                 159             197          225              213   \n",
       "AB                459             572          660              630   \n",
       "\n",
       "                28152        436    ...           7331          25744  \\\n",
       "BA              0.338        0.338  ...           0.209         0.208   \n",
       "Season           2011         2016  ...            2016          2014   \n",
       "Player  Michael Young  Jose Altuve  ...  Danny Espinosa  Melvin Upton   \n",
       "H                 213          216  ...             108           108   \n",
       "AB                631          640  ...             516           519   \n",
       "\n",
       "                1293        11376      6819           21332        19604  \\\n",
       "BA              0.208       0.205      0.204          0.198        0.197   \n",
       "Season           2013        2010       2012           2010         2012   \n",
       "Player  Darwin Barney  Aaron Hill  Adam Dunn  Mark Reynolds  Carlos Pena   \n",
       "H                 104         108        110             99           98   \n",
       "AB                501         528        539            499          497   \n",
       "\n",
       "              19607        5895       25730  \n",
       "BA            0.196        0.196      0.179  \n",
       "Season         2010         2014       2013  \n",
       "Player  Carlos Pena  Chris Davis  Dan Uggla  \n",
       "H                95           88         80  \n",
       "AB              484          450        448  \n",
       "\n",
       "[5 rows x 948 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[df.Season >= 2010]\n",
    "\n",
    "df_plot = pd.DataFrame({\n",
    "        'BA': df['BA'],\n",
    "        'Season': df['Season'],\n",
    "        'Player': df['Player Name'],\n",
    "        'H': df['H'],\n",
    "        'AB': df['AB']})\n",
    "\n",
    "df_plot.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Examine the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4275 entries, 26542 to 25730\n",
      "Data columns (total 29 columns):\n",
      " #   Column       Non-Null Count  Dtype \n",
      "---  ------       --------------  ----- \n",
      " 0   playerID     4275 non-null   object\n",
      " 1   Player Name  4275 non-null   object\n",
      " 2   weight       4275 non-null   int64 \n",
      " 3   height       4275 non-null   int64 \n",
      " 4   bats         4275 non-null   object\n",
      " 5   throws       4275 non-null   object\n",
      " 6   Season       4275 non-null   int64 \n",
      " 7   League       4275 non-null   object\n",
      " 8   teamID       4275 non-null   object\n",
      " 9   Team         4275 non-null   object\n",
      " 10  Franchise    4275 non-null   object\n",
      " 11  G            4275 non-null   int64 \n",
      " 12  AB           4275 non-null   int64 \n",
      " 13  R            4275 non-null   int64 \n",
      " 14  H            4275 non-null   int64 \n",
      " 15  2B           4275 non-null   int64 \n",
      " 16  3B           4275 non-null   int64 \n",
      " 17  HR           4275 non-null   int64 \n",
      " 18  RBI          4275 non-null   int64 \n",
      " 19  SB           4275 non-null   int64 \n",
      " 20  BB           4275 non-null   int64 \n",
      " 21  SO           4275 non-null   int64 \n",
      " 22  salary       4275 non-null   int64 \n",
      " 23  IBB          4275 non-null   int64 \n",
      " 24  HBP          4275 non-null   int64 \n",
      " 25  SH           4275 non-null   int64 \n",
      " 26  SF           4275 non-null   int64 \n",
      " 27  PA           4275 non-null   int64 \n",
      " 28  BA           4275 non-null   object\n",
      "dtypes: int64(20), object(9)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Begin Cleaning the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1999: 13951, 1997: 11271, 2000: 13296, 2004: 12975, 1993: 11766, 2002: 12050, 1987: 9924, 1995: 8401, 1985: 10003, 1988: 9322, 2009: 11323, 2008: 11429, 2007: 12947, 1998: 13189, 2010: 10605, 2003: 12289, 1996: 12756, 1986: 9512, 1994: 1475, 2001: 12531, 2016: 11123, 2013: 9788, 2006: 12664, 2012: 10441, 2011: 10154, 1992: 8957, 1991: 8888, 2014: 9846, 1989: 8606, 2015: 9616, 1990: 9158, 2005: 11795}\n",
      "{1999: 22548, 1997: 19854, 2000: 21799, 2004: 22157, 1993: 21792, 2002: 21895, 1987: 17638, 1995: 13927, 1985: 19571, 1988: 18786, 2009: 20425, 2008: 20343, 2007: 23001, 1998: 22638, 2010: 19885, 2003: 21971, 1996: 21170, 1986: 18514, 1994: 2029, 2001: 21833, 2016: 20592, 2013: 19530, 2006: 21547, 2012: 19903, 2011: 19438, 1992: 17706, 1991: 17040, 2014: 20288, 1989: 17624, 2015: 19096, 1990: 18382, 2005: 21484}\n"
     ]
    }
   ],
   "source": [
    "df = df.drop(columns=['throws', 'salary', 'playerID', 'weight', 'height', 'teamID', 'Franchise', 'SB', 'BB', 'HBP'])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "runs_per_year = {}\n",
    "games_per_year = {}\n",
    "\n",
    "for i, row in df.iterrows():\n",
    "    year = row['Season']\n",
    "    runs = row['R']\n",
    "    games = row['G']\n",
    "    if year in runs_per_year:\n",
    "        runs_per_year[year] = runs_per_year[year] + runs\n",
    "        games_per_year[year] = games_per_year[year] + games\n",
    "    else:\n",
    "        runs_per_year[year] = runs\n",
    "        games_per_year[year] = games\n",
    "        \n",
    "print(runs_per_year)\n",
    "print(games_per_year)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deeper data clean based on amount of at bats to the number needed to be able to win a batting award and also caluclating avg runs per game from past seasons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1999: 0.6187244988469044, 1997: 0.5676941674221819, 2000: 0.6099362356071379, 2004: 0.5855937175610416, 1993: 0.5399229074889867, 2002: 0.5503539620918018, 1987: 0.5626488263975508, 1995: 0.6032167731744095, 1985: 0.5111133820448623, 1988: 0.4962205898009156, 2009: 0.5543696450428397, 2008: 0.5618148748955415, 2007: 0.5628885700621712, 1998: 0.5826044703595724, 2010: 0.5333165702791048, 2003: 0.559328205361613, 1996: 0.6025507794048182, 1986: 0.5137733607000108, 1994: 0.7269590931493346, 2001: 0.5739476938579215, 2016: 0.5401612276612276, 2013: 0.5011776753712237, 2006: 0.5877384322643523, 2012: 0.5245942822690046, 2011: 0.5223788455602428, 1992: 0.5058737151248165, 1991: 0.5215962441314554, 2014: 0.4853115141955836, 1989: 0.4883113935542442, 2015: 0.5035609551738583, 1990: 0.49820476553149823, 2005: 0.549013219139825}\n"
     ]
    }
   ],
   "source": [
    "mlb_runs_per_game = {}\n",
    "for k, v in games_per_year.items():\n",
    "    year = k\n",
    "    games = v\n",
    "    runs = runs_per_year[year]\n",
    "    mlb_runs_per_game[year] = runs / games\n",
    "    \n",
    "print(mlb_runs_per_game)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Those who have 500 or more Plate Apperances are eligble for a batting award, but the at bats is what is determined to calculate the batting average."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player Name</th>\n",
       "      <th>bats</th>\n",
       "      <th>Season</th>\n",
       "      <th>League</th>\n",
       "      <th>Team</th>\n",
       "      <th>G</th>\n",
       "      <th>AB</th>\n",
       "      <th>R</th>\n",
       "      <th>H</th>\n",
       "      <th>2B</th>\n",
       "      <th>3B</th>\n",
       "      <th>HR</th>\n",
       "      <th>RBI</th>\n",
       "      <th>SO</th>\n",
       "      <th>IBB</th>\n",
       "      <th>SH</th>\n",
       "      <th>SF</th>\n",
       "      <th>PA</th>\n",
       "      <th>BA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10289</th>\n",
       "      <td>Josh Hamilton</td>\n",
       "      <td>L</td>\n",
       "      <td>2010</td>\n",
       "      <td>AL</td>\n",
       "      <td>Texas Rangers</td>\n",
       "      <td>133</td>\n",
       "      <td>518</td>\n",
       "      <td>95</td>\n",
       "      <td>186</td>\n",
       "      <td>40</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>100</td>\n",
       "      <td>95</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>576</td>\n",
       "      <td>0.359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14449</th>\n",
       "      <td>DJ LeMahieu</td>\n",
       "      <td>R</td>\n",
       "      <td>2016</td>\n",
       "      <td>NL</td>\n",
       "      <td>Colorado Rockies</td>\n",
       "      <td>146</td>\n",
       "      <td>552</td>\n",
       "      <td>104</td>\n",
       "      <td>192</td>\n",
       "      <td>32</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>66</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>637</td>\n",
       "      <td>0.348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3738</th>\n",
       "      <td>Miguel Cabrera</td>\n",
       "      <td>R</td>\n",
       "      <td>2013</td>\n",
       "      <td>AL</td>\n",
       "      <td>Detroit Tigers</td>\n",
       "      <td>148</td>\n",
       "      <td>555</td>\n",
       "      <td>103</td>\n",
       "      <td>193</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>137</td>\n",
       "      <td>94</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>671</td>\n",
       "      <td>0.348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17792</th>\n",
       "      <td>Daniel Murphy</td>\n",
       "      <td>L</td>\n",
       "      <td>2016</td>\n",
       "      <td>NL</td>\n",
       "      <td>Washington Nationals</td>\n",
       "      <td>142</td>\n",
       "      <td>531</td>\n",
       "      <td>88</td>\n",
       "      <td>184</td>\n",
       "      <td>47</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>104</td>\n",
       "      <td>57</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>592</td>\n",
       "      <td>0.347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3723</th>\n",
       "      <td>Melky Cabrera</td>\n",
       "      <td>B</td>\n",
       "      <td>2012</td>\n",
       "      <td>NL</td>\n",
       "      <td>San Francisco Giants</td>\n",
       "      <td>113</td>\n",
       "      <td>459</td>\n",
       "      <td>84</td>\n",
       "      <td>159</td>\n",
       "      <td>25</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>60</td>\n",
       "      <td>63</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>505</td>\n",
       "      <td>0.346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3736</th>\n",
       "      <td>Miguel Cabrera</td>\n",
       "      <td>R</td>\n",
       "      <td>2011</td>\n",
       "      <td>AL</td>\n",
       "      <td>Detroit Tigers</td>\n",
       "      <td>161</td>\n",
       "      <td>572</td>\n",
       "      <td>111</td>\n",
       "      <td>197</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>105</td>\n",
       "      <td>89</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>710</td>\n",
       "      <td>0.344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>Jose Altuve</td>\n",
       "      <td>R</td>\n",
       "      <td>2014</td>\n",
       "      <td>AL</td>\n",
       "      <td>Houston Astros</td>\n",
       "      <td>158</td>\n",
       "      <td>660</td>\n",
       "      <td>85</td>\n",
       "      <td>225</td>\n",
       "      <td>47</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>59</td>\n",
       "      <td>53</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>714</td>\n",
       "      <td>0.341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9133</th>\n",
       "      <td>Adrian Gonzalez</td>\n",
       "      <td>L</td>\n",
       "      <td>2011</td>\n",
       "      <td>AL</td>\n",
       "      <td>Boston Red Sox</td>\n",
       "      <td>159</td>\n",
       "      <td>630</td>\n",
       "      <td>108</td>\n",
       "      <td>213</td>\n",
       "      <td>45</td>\n",
       "      <td>3</td>\n",
       "      <td>27</td>\n",
       "      <td>117</td>\n",
       "      <td>119</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>735</td>\n",
       "      <td>0.338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28152</th>\n",
       "      <td>Michael Young</td>\n",
       "      <td>R</td>\n",
       "      <td>2011</td>\n",
       "      <td>AL</td>\n",
       "      <td>Texas Rangers</td>\n",
       "      <td>159</td>\n",
       "      <td>631</td>\n",
       "      <td>88</td>\n",
       "      <td>213</td>\n",
       "      <td>41</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>106</td>\n",
       "      <td>78</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>696</td>\n",
       "      <td>0.338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>Jose Altuve</td>\n",
       "      <td>R</td>\n",
       "      <td>2016</td>\n",
       "      <td>AL</td>\n",
       "      <td>Houston Astros</td>\n",
       "      <td>161</td>\n",
       "      <td>640</td>\n",
       "      <td>108</td>\n",
       "      <td>216</td>\n",
       "      <td>42</td>\n",
       "      <td>5</td>\n",
       "      <td>24</td>\n",
       "      <td>96</td>\n",
       "      <td>70</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>728</td>\n",
       "      <td>0.338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Player Name bats  Season League                  Team    G   AB  \\\n",
       "10289    Josh Hamilton    L    2010     AL         Texas Rangers  133  518   \n",
       "14449      DJ LeMahieu    R    2016     NL      Colorado Rockies  146  552   \n",
       "3738    Miguel Cabrera    R    2013     AL        Detroit Tigers  148  555   \n",
       "17792    Daniel Murphy    L    2016     NL  Washington Nationals  142  531   \n",
       "3723     Melky Cabrera    B    2012     NL  San Francisco Giants  113  459   \n",
       "3736    Miguel Cabrera    R    2011     AL        Detroit Tigers  161  572   \n",
       "434        Jose Altuve    R    2014     AL        Houston Astros  158  660   \n",
       "9133   Adrian Gonzalez    L    2011     AL        Boston Red Sox  159  630   \n",
       "28152    Michael Young    R    2011     AL         Texas Rangers  159  631   \n",
       "436        Jose Altuve    R    2016     AL        Houston Astros  161  640   \n",
       "\n",
       "         R    H  2B  3B  HR  RBI   SO  IBB  SH  SF   PA     BA  \n",
       "10289   95  186  40   3  32  100   95    5   1   4  576  0.359  \n",
       "14449  104  192  32   8  11   66   80    2   8   6  637  0.348  \n",
       "3738   103  193  26   1  44  137   94   19   0   2  671  0.348  \n",
       "17792   88  184  47   5  25  104   57   10   0   8  592  0.347  \n",
       "3723    84  159  25  10  11   60   63    4   1   5  505  0.346  \n",
       "3736   111  197  48   0  30  105   89   22   0   5  710  0.344  \n",
       "434     85  225  47   3   7   59   53    7   1   5  714  0.341  \n",
       "9133   108  213  45   3  27  117  119   20   0   5  735  0.338  \n",
       "28152   88  213  41   6  11  106   78    7   0   9  696  0.338  \n",
       "436    108  216  42   5  24   96   70   11   3   7  728  0.338  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Taking a look at the relation to At bats vs Hits. More At Bats does not always equal more Hits "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BA</th>\n",
       "      <th>Season</th>\n",
       "      <th>Player</th>\n",
       "      <th>H</th>\n",
       "      <th>AB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>26542</th>\n",
       "      <td>0.379</td>\n",
       "      <td>1999</td>\n",
       "      <td>Larry Walker</td>\n",
       "      <td>166</td>\n",
       "      <td>438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10086</th>\n",
       "      <td>0.372</td>\n",
       "      <td>1997</td>\n",
       "      <td>Tony Gwynn</td>\n",
       "      <td>220</td>\n",
       "      <td>592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8634</th>\n",
       "      <td>0.372</td>\n",
       "      <td>2000</td>\n",
       "      <td>Nomar Garciaparra</td>\n",
       "      <td>197</td>\n",
       "      <td>529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24681</th>\n",
       "      <td>0.372</td>\n",
       "      <td>2004</td>\n",
       "      <td>Ichiro Suzuki</td>\n",
       "      <td>262</td>\n",
       "      <td>704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10889</th>\n",
       "      <td>0.372</td>\n",
       "      <td>2000</td>\n",
       "      <td>Todd Helton</td>\n",
       "      <td>216</td>\n",
       "      <td>580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19604</th>\n",
       "      <td>0.197</td>\n",
       "      <td>2012</td>\n",
       "      <td>Carlos Pena</td>\n",
       "      <td>98</td>\n",
       "      <td>497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19607</th>\n",
       "      <td>0.196</td>\n",
       "      <td>2010</td>\n",
       "      <td>Carlos Pena</td>\n",
       "      <td>95</td>\n",
       "      <td>484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5895</th>\n",
       "      <td>0.196</td>\n",
       "      <td>2014</td>\n",
       "      <td>Chris Davis</td>\n",
       "      <td>88</td>\n",
       "      <td>450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6082</th>\n",
       "      <td>0.179</td>\n",
       "      <td>1991</td>\n",
       "      <td>Rob Deer</td>\n",
       "      <td>80</td>\n",
       "      <td>448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25730</th>\n",
       "      <td>0.179</td>\n",
       "      <td>2013</td>\n",
       "      <td>Dan Uggla</td>\n",
       "      <td>80</td>\n",
       "      <td>448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4275 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          BA  Season             Player    H   AB\n",
       "26542  0.379    1999       Larry Walker  166  438\n",
       "10086  0.372    1997         Tony Gwynn  220  592\n",
       "8634   0.372    2000  Nomar Garciaparra  197  529\n",
       "24681  0.372    2004      Ichiro Suzuki  262  704\n",
       "10889  0.372    2000        Todd Helton  216  580\n",
       "...      ...     ...                ...  ...  ...\n",
       "19604  0.197    2012        Carlos Pena   98  497\n",
       "19607  0.196    2010        Carlos Pena   95  484\n",
       "5895   0.196    2014        Chris Davis   88  450\n",
       "6082   0.179    1991           Rob Deer   80  448\n",
       "25730  0.179    2013          Dan Uggla   80  448\n",
       "\n",
       "[4275 rows x 5 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating graph looking at runs per avg over seasons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x14db084d6af0>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'MLB Yearly Runs per Game')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Year')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MLB Runs per Game')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lists = sorted(mlb_runs_per_game.items())\n",
    "x, y = zip(*lists)\n",
    "\n",
    "# Create line plot of Year vs. MLB runs per Game\n",
    "plt.plot(x, y)\n",
    "plt.title('MLB Yearly Runs per Game')\n",
    "plt.xlabel('Year')\n",
    "plt.ylabel('MLB Runs per Game')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Player Name bats  Season League                  Team    G   AB  \\\n",
      "10289   Josh Hamilton    L    2010     AL         Texas Rangers  133  518   \n",
      "14449     DJ LeMahieu    R    2016     NL      Colorado Rockies  146  552   \n",
      "3738   Miguel Cabrera    R    2013     AL        Detroit Tigers  148  555   \n",
      "17792   Daniel Murphy    L    2016     NL  Washington Nationals  142  531   \n",
      "3723    Melky Cabrera    B    2012     NL  San Francisco Giants  113  459   \n",
      "\n",
      "         R    H  2B  ...  HR  RBI  SO  IBB  SH  SF   PA     BA year_label  \\\n",
      "10289   95  186  40  ...  32  100  95    5   1   4  576  0.359          8   \n",
      "14449  104  192  32  ...  11   66  80    2   8   6  637  0.348          8   \n",
      "3738   103  193  26  ...  44  137  94   19   0   2  671  0.348          8   \n",
      "17792   88  184  47  ...  25  104  57   10   0   8  592  0.347          8   \n",
      "3723    84  159  25  ...  11   60  63    4   1   5  505  0.346          8   \n",
      "\n",
      "       era_8  \n",
      "10289      1  \n",
      "14449      1  \n",
      "3738       1  \n",
      "17792      1  \n",
      "3723       1  \n",
      "\n",
      "[5 rows x 21 columns]\n"
     ]
    }
   ],
   "source": [
    "def assign_label(year):\n",
    "    if year < 1920:\n",
    "        return 1\n",
    "    elif year >= 1920 and year <= 1941:\n",
    "        return 2\n",
    "    elif year >= 1942 and year <= 1945:\n",
    "        return 3\n",
    "    elif year >= 1946 and year <= 1962:\n",
    "        return 4\n",
    "    elif year >= 1963 and year <= 1976:\n",
    "        return 5\n",
    "    elif year >= 1977 and year <= 1992:\n",
    "        return 6\n",
    "    elif year >= 1993 and year <= 2009:\n",
    "        return 7\n",
    "    elif year >= 2010:\n",
    "        return 8\n",
    "        \n",
    "# Add `year_label` column to `df`    \n",
    "df['year_label'] = df['Season'].apply(assign_label)\n",
    "\n",
    "dummy_df = pd.get_dummies(df['year_label'], prefix='era')\n",
    "\n",
    "# Concatenate `df` and `dummy_df`\n",
    "df = pd.concat([df, dummy_df], axis=1)\n",
    "\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['R_per_game'] = df['R'] / df['G']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x14db08431c40>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Runs per Game vs. At Bats')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'At Bats')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Runs per Game')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(12, 6))\n",
    "\n",
    "ax1 = fig.add_subplot(1,2,1)\n",
    "ax1.scatter(df['R_per_game'], df['AB'], c='blue')\n",
    "ax1.set_title('Runs per Game vs. At Bats')\n",
    "ax1.set_ylabel('At Bats')\n",
    "ax1.set_xlabel('Runs per Game')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
